// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// run_simpers
int run_simpers(std::string input_domain_complex_file_name, std::string input_range_complex_file_folder, std::string input_simplicial_map_file, std::string output_range_complex_with_annotation_file_name, std::string output_persistence_file_name, std::string generator_file, bool is_input_domain_complex_with_annotation, bool is_output_range_complex_with_annotation, bool is_elementary, bool is_generator, float fThreshold_, int numFiltration, int max_dimension_);
RcppExport SEXP _Simpers_run_simpers(SEXP input_domain_complex_file_nameSEXP, SEXP input_range_complex_file_folderSEXP, SEXP input_simplicial_map_fileSEXP, SEXP output_range_complex_with_annotation_file_nameSEXP, SEXP output_persistence_file_nameSEXP, SEXP generator_fileSEXP, SEXP is_input_domain_complex_with_annotationSEXP, SEXP is_output_range_complex_with_annotationSEXP, SEXP is_elementarySEXP, SEXP is_generatorSEXP, SEXP fThreshold_SEXP, SEXP numFiltrationSEXP, SEXP max_dimension_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_domain_complex_file_name(input_domain_complex_file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type input_range_complex_file_folder(input_range_complex_file_folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type input_simplicial_map_file(input_simplicial_map_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_range_complex_with_annotation_file_name(output_range_complex_with_annotation_file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_persistence_file_name(output_persistence_file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type generator_file(generator_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type is_input_domain_complex_with_annotation(is_input_domain_complex_with_annotationSEXP);
    Rcpp::traits::input_parameter< bool >::type is_output_range_complex_with_annotation(is_output_range_complex_with_annotationSEXP);
    Rcpp::traits::input_parameter< bool >::type is_elementary(is_elementarySEXP);
    Rcpp::traits::input_parameter< bool >::type is_generator(is_generatorSEXP);
    Rcpp::traits::input_parameter< float >::type fThreshold_(fThreshold_SEXP);
    Rcpp::traits::input_parameter< int >::type numFiltration(numFiltrationSEXP);
    Rcpp::traits::input_parameter< int >::type max_dimension_(max_dimension_SEXP);
    rcpp_result_gen = Rcpp::wrap(run_simpers(input_domain_complex_file_name, input_range_complex_file_folder, input_simplicial_map_file, output_range_complex_with_annotation_file_name, output_persistence_file_name, generator_file, is_input_domain_complex_with_annotation, is_output_range_complex_with_annotation, is_elementary, is_generator, fThreshold_, numFiltration, max_dimension_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Simpers_run_simpers", (DL_FUNC) &_Simpers_run_simpers, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_Simpers(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
