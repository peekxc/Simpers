% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filtration.R
\name{filtration}
\alias{filtration}
\title{Construct a filtration}
\usage{
filtration(x, sm)
}
\arguments{
\item{x}{the file name of the input simplicial complex, or a simplex tree. See details.}

\item{sm}{the file name of the the simplicial maps, or a vector of elementary operations. See details.}
}
\value{
A closure \eqn{f(t)}, which takes as input a timestamp \eqn{t} and returns a simplex tree object representing the complex at state \eqn{Kt}.
}
\description{
Creates a sequence of simplicial complexes connected by simplicial maps.
}
\details{
This function creates a dynamic representation of a sequence of simplicial complexes connected by simplicial maps.
Although the representation is not a filtration in the strict inclusion sense, for simplicity, this will be referred to as
a filtration. That is, in this context, a filtration \eqn{K'} is a sequence:
\deqn{K' = K -> K1 -> K2 ... -> KP}
where each \eqn{K*} is a simplicial complex and each \eqn{->} represents a simplicial map.
The simplicial maps are indexed by an arbitrary timestamp, i.e. a numeric indicating when the basis elements are born / die. \cr
\cr
Computationally, \code{filtration} parses the input simplicial maps into an ordered list of expressions representing
the appropriate elementary inclusions and/or vertex collapses. These expression are stored in a closure, which is returned to the user.
The resulting closure takes as input a timestamp and returns the simplical complex representing the
state of complex at that 'time' in sequence. Note that the inverse operations are not stored, so each time the closure is
called with a timestamp \eqn{a}, if the filtration is at state \eqn{b}, and \eqn{a < b}, then to get the complex to state \eqn{a}
it must be rebuilt by loading the initial complex and then applying the maps \eqn{1, 2, ..., a}.
}
